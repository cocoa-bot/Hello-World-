(lambda __print, __operator, __g: [[[[[(__print(uic), [[[(__print(('remainder', remainder)), (lambda __after: (__print('Valid'), __after())[1] if (((ic[0].lower() in ('f', 'g')) and (ic[-1].lower() == FG[remainder].lower())) or ((ic[0].lower() in ('s', 't')) and (ic[-1].lower() == ST[remainder].lower()))) else (__print('Invalid'), __after())[1])(lambda: None))[1] for __g['remainder'] in [((total % 11))]][0] for __g['total'] in [(__operator.iadd(__g['total'], (4 if (ic[0].lower() in ('t', 'g')) else 0)))]][0] for __g['total'] in [((((((((int(uic[0]) * WEIGHT[0]) + (int(uic[1]) * WEIGHT[1])) + (int(uic[2]) * WEIGHT[2])) + (int(uic[3]) * WEIGHT[3])) + (int(uic[4]) * WEIGHT[4])) + (int(uic[5]) * WEIGHT[5])) + (int(uic[6]) * WEIGHT[6])))]][0])[1] for __g['uic'] in [(ic[1:8])]][0] for __g['ic'] in [(input('Enter IC number: '))]][0] for __g['ST'] in [(['J', 'Z', 'I', 'H', 'G', 'F', 'E', 'D', 'C', 'B', 'A'])]][0] for __g['FG'] in [(['X', 'W', 'U', 'T', 'R', 'Q', 'P', 'N', 'M', 'L', 'K'])]][0] for __g['WEIGHT'] in [([2, 7, 6, 5, 4, 3, 2])]][0])(__import__('__builtin__', level=0).__dict__['print'], __import__('operator', level=0), globals()) # Does not work D: